import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom'; // 1. Import useParams
import { getProduct, getCategoriesFromProducts } from '../services/firestoreService';
import { FiShoppingCart, FiLoader, FiAlertTriangle, FiSearch, FiX } from 'react-icons/fi';
import { useCart } from '../contexts/CartContext';
import Navbar from '../components/Navbar';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Footer from '../components/Footer';

// --- Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
const ProductCard = ({ product }) => {
  // 1. ‡∏î‡∏∂‡∏á cartItems ‡πÅ‡∏•‡∏∞ addToCart ‡∏°‡∏≤‡∏à‡∏≤‡∏Å useCart Context
  const { addToCart, cartItems } = useCart();

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('th-TH', {
      style: 'currency',
      currency: 'THB',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  // 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleAddToCart
  const handleAddToCart = () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å product.id)
    const isItemInCart = cartItems.some(item => item.id === product.id);

    if (isItemInCart) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      toast.warn(`üõí "${product.product_name}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`, {
        position: 'top-right',
        autoClose: 2000,
      });
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      addToCart(product);
      toast.success(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° "${product.product_name}" ‡πÅ‡∏•‡πâ‡∏ß`, {
        position: 'top-right',
        autoClose: 2000,
      });
    }
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden transition-transform duration-300 hover:shadow-xl hover:-translate-y-1">
      <div className="w-full h-48 bg-gray-100">
        <img
          src={product.imageUrl || 'https://placehold.co/600x400/e2e8f0/333333?text=‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
          alt={product.product_name}
          className="w-full h-full object-cover"
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = 'https://placehold.co/600x400/e2e8f0/333333?text=‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏µ‡∏¢';
          }}
        />
      </div>
      <div className="p-4">
        <span className="inline-block bg-green-100 text-green-800 text-xs font-semibold px-2.5 py-0.5 rounded-full mb-2">
          {product.category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}
        </span>
        <h3 className="text-lg font-bold text-gray-800 truncate">{product.product_name}</h3>
        <p className="text-xs font-bold text-gray-800 truncate">{product.detail}</p>
        <p className="text-xl font-semibold text-green-600 mt-2">{formatCurrency(product.price)}</p>
        <button
          onClick={handleAddToCart}
          className="mt-4 w-full flex items-center justify-center bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 transition duration-300"
        >
          <FiShoppingCart className="mr-2" />
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        </button>
      </div>
    </div>
  );
};


// --- Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
const SearchBar = ({ searchTerm, onSearchChange, onClearSearch }) => {
    return (
        <div className="relative mb-6 transition-all duration-300">
            <input
                type="text"
                placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                value={searchTerm}
                onChange={(e) => onSearchChange(e.target.value)}
                className="w-full pl-10 pr-10 py-3 bg-white/70 backdrop-blur-sm border border-gray-300 shadow-md rounded-full focus:ring-2 focus:ring-green-500 focus:outline-none transition duration-300 placeholder:text-gray-400 text-gray-800"
            />
            <div className="absolute inset-y-0 left-3 flex items-center text-gray-400 pointer-events-none">
                <FiSearch className="h-5 w-5" />
            </div>
            {searchTerm && (
                <button
                    onClick={onClearSearch}
                    className="absolute inset-y-0 right-3 flex items-center text-gray-400 hover:text-red-500 transition duration-200"
                >
                    <FiX className="h-5 w-5" />
                </button>
            )}
        </div>
    );
};


// --- Component ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
const ProductListPage = () => {
  // 2. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ category ‡∏à‡∏≤‡∏Å URL parameter
  const { category: categoryFromUrl } = useParams();

  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  // 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ selectedCategory ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å URL ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
  const [selectedCategory, setSelectedCategory] = useState(categoryFromUrl ? decodeURIComponent(categoryFromUrl) : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const [productsData, categoriesData] = await Promise.all([
          getProduct(),
          getCategoriesFromProducts(),
        ]);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        const allCategory = { name: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', count: productsData.length };
        const hasAllCategory = categoriesData.some(c => c.name === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');

        setProducts(productsData);
        setCategories(hasAllCategory ? categoriesData : [allCategory, ...categoriesData]);
        setError(null);
      } catch (err) {
        console.error('Failed to fetch data:', err);
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  useEffect(() => {
    let filtered = products;
    if (selectedCategory !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
      filtered = filtered.filter((p) => p.category === selectedCategory);
    }
    if (searchTerm.trim() !== '') {
      filtered = filtered.filter(
        (p) =>
          p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          p.category.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    setFilteredProducts(filtered);
  }, [selectedCategory, searchTerm, products]);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ category ‡∏à‡∏≤‡∏Å URL ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô, ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state
  useEffect(() => {
      const decodedCategory = categoryFromUrl ? decodeURIComponent(categoryFromUrl) : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
      setSelectedCategory(decodedCategory);
  }, [categoryFromUrl]);


  const handleSearchChange = (value) => setSearchTerm(value);
  const handleClearSearch = () => setSearchTerm('');

  const LoadingState = () => (
    <div className="flex flex-col items-center justify-center h-64 text-gray-500">
      <FiLoader className="animate-spin text-4xl mb-4" />
      <p className="text-lg">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...</p>
    </div>
  );

  const ErrorState = () => (
    <div className="flex flex-col items-center justify-center h-64 text-red-500 bg-red-50 p-8 rounded-lg">
      <FiAlertTriangle className="text-4xl mb-4" />
      <p className="text-lg font-semibold">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!</p>
      <p>{error}</p>
    </div>
  );

  return (
    <div className="bg-gray-50 min-h-screen font-sans">
      <Navbar />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl md:text-4xl font-bold text-gray-800 text-center mb-10">
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </h1>

        <div className="max-w-md mx-auto mb-8">
            <SearchBar
                searchTerm={searchTerm}
                onSearchChange={handleSearchChange}
                onClearSearch={handleClearSearch}
            />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <aside className="md:col-span-1 bg-white p-6 rounded-lg shadow-sm">
            <h2 className="text-xl font-semibold mb-4 text-gray-700">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h2>
            <ul className="space-y-2">
              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" */}
              <li>
                <button
                  onClick={() => setSelectedCategory('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')}
                  className={`w-full text-left px-4 py-2 rounded-md transition duration-200 flex justify-between items-center ${
                    selectedCategory === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
                      ? 'bg-green-600 text-white font-bold shadow'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <span>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                  <span
                    className={`text-xs px-2 py-0.5 rounded-full ${
                      selectedCategory === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
                        ? 'bg-white text-green-700'
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {products.length}
                  </span>
                </button>
              </li>

              {categories.filter(cat => cat.name !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î').map((cat) => (
                <li key={cat.name}>
                  <button
                    onClick={() => setSelectedCategory(cat.name)}
                    className={`w-full text-left px-4 py-2 rounded-md transition duration-200 flex justify-between items-center ${
                      selectedCategory === cat.name
                        ? 'bg-green-600 text-white font-bold shadow'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    <span>{cat.name}</span>
                    <span
                      className={`text-xs px-2 py-0.5 rounded-full ${
                        selectedCategory === cat.name
                          ? 'bg-white text-green-700'
                          : 'bg-gray-200 text-gray-600'
                      }`}
                    >
                      {cat.count}
                    </span>
                  </button>
                </li>
              ))}
            </ul>
          </aside>

          <main className="md:col-span-3">
             {searchTerm && (
               <div className="mb-4 p-3 bg-blue-50 rounded-lg">
                 <p className="text-sm text-blue-700">
                   ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "{searchTerm}" ‡∏û‡∏ö {filteredProducts.length} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                 </p>
               </div>
             )}

            {loading ? (
              <LoadingState />
            ) : error ? (
              <ErrorState />
            ) : filteredProducts.length > 0 ? (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredProducts.map((product) => (
                  <ProductCard key={product.id} product={product} />
                ))}
              </div>
            ) : (
                <div className="text-center py-16 px-6 bg-white rounded-lg shadow-sm">
                    <h3 className="text-2xl font-semibold text-gray-700">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
                    <p className="text-gray-500 mt-2">
                        {searchTerm
                            ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${searchTerm}"`
                            : `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${selectedCategory}" ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`}
                    </p>
                    {searchTerm && (
                        <button
                            onClick={handleClearSearch}
                            className="mt-4 text-green-600 hover:text-green-700 underline"
                        >
                            ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                        </button>
                    )}
                </div>
            )}
          </main>
        </div>
      </div>
      <ToastContainer position="top-right" autoClose={2000} />
      <Footer></Footer>
    </div>
  );
};

export default ProductListPage;